Description: >
  This template is used to create and deploy a simple VPC with one public and one private subnet and associated gateways

Parameters:
  VpcCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR Block for the VPC
  
  PubSubnetCidrBlock:
    Type: String
    Default: 10.0.0.0/28
    Description: CIDR Block for the public subnet
  
  PrvSubnetCidrBlock:
    Type: String
    Default: 10.0.1.0/28
    Description: CIDR Block for the private subnet    

  PubAvailabilityZone:
    Type: String
    Default: eu-west-1a
    Description: Availability Zone for the public subnet
  
  PrvAvailabilityZone:
    Type: String
    Default: eu-west-1a    
    Description: Availability Zone for the private subnet
    
Resources: 
  FridayHittVpc:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: Name
          Value: "MH-VPC"
          
  FridayHittPubSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Ref PubAvailabilityZone
      VpcId: !Ref FridayHittVpc
      CidrBlock: !Ref PubSubnetCidrBlock
      MapPublicIpOnLaunch: true        
      Tags: 
        - Key: Name
          Value: "MH-Public-Subnet"
            
  FridayHittPrvSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref PrvAvailabilityZone
      VpcId: !Ref FridayHittVpc
      CidrBlock: !Ref PrvSubnetCidrBlock
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "MH-Private-Subnet"
            
  FridayHittInetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: FridayHittVpc
    Properties:
      Tags:
        - Key: Name
          Value: "MH-Inet-Gateway"

  AttachInetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref FridayHittVpc
      InternetGatewayId: !Ref FridayHittInetGateway
      
  FridayHittElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: "MH-ElasticIP"

  FridayHittNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - FridayHittElasticIP
        - AllocationId
      SubnetId: !Ref FridayHittPrvSubnet
      Tags:
        - Key: Name
          Value: "MH-NATGateway"
          
  FridayHittPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref FridayHittVpc
      Tags: 
        - Key: Name
          Value: "MH-PublicRouteTable"

  FridayHittRouteToIGW:
    Type: AWS::EC2::Route
    DependsOn:
      - FridayHittInetGateway
      - AttachInetGateway
    Properties:
      RouteTableId: !Ref FridayHittPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref FridayHittInetGateway
              
  FridayHittPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref FridayHittVpc
      Tags:
        - Key: Name
          Value: "MH-PrivateRouteTable"
          
  FridayHittRouteToNAT:
    Type: AWS::EC2::Route
    DependsOn:  FridayHittRouteToIGW
    Properties:
      RouteTableId: !Ref FridayHittPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref FridayHittNatGateway
      
  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref FridayHittPubSubnet
      RouteTableId: !Ref FridayHittPublicRouteTable
      
  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
       SubnetId: !Ref FridayHittPrvSubnet
       RouteTableId: !Ref FridayHittPrivateRouteTable

# EC2 Instances:  
  
  PrvEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-00385a401487aefa4
      SecurityGroups: [ !Ref PrvSecurityGrp ]
      InstanceType: t2.micro
      
  PrvSecurityGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 + SSH
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp:  0.0.0.0/0 #This should be refined to restricted list
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
 
  PubEC2Instance:
  Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-00385a401487aefa4
      SecurityGroups: [ !Ref PubSecurityGrp ]
      InstanceType: t2.micro
       
  PubSecurityGrp:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: Enable HTTP access via port 80 + SSH
    SecurityGroupIngress: 
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - CidrIp:  0.0.0.0/0 #This should be refined to restricted list
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22       